#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                   # 연관 : 리스트 #

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 라이브러리 사용법 #

#= = = = = = = = = = = = = = = = = = = = = = = = = =

# numpy 모듈을 불러옵니다.
# 예 : numpy.이름 으로 사용
import numpy 

# numpy 모듈을 np라는 이름으로 불러옵니다.
# 예 : np.이름 으로 사용 (이름변경가능)
import numpy as np  

# numpy 모듈 내의 모든 함수와 클래스를 현재 네임스페이스로 불러옵니다.
# 예 : np.array -> array()
from numpy import *  


#= = = = = = = = = = = = = = = = = = = = = = = = = = 

          # 리스트 - > [1차원] 넘파이 배열 생성 #

#= = = = = = = = = = = = = = = = = = = = = = = = = =

# 리스트를 생성합니다.
list = [1, 2, 10]  

# 리스트를 3번 반복하여 새로운 리스트를 생성합니다.
# 결과: [1, 2, 10, 1, 2, 10, 1, 2, 10]
# 리스트는 숫자가 아니기 때문에 곱셈 연산자(*)는 리스트를 반복하는 역할을 합니다.
print(list * 3)


# 리스트를 numpy 배열로 변환합니다.
arr = np.array(list)  

# numpy 배열의 모든 요소에 3을 곱한 새로운 배열을 생성합니다.
# 숫자로 이루어진 경우에만 해당 수식을 사용 가능합니다.
# 배열의 값은 숫자이기 때문에 각 요소에 곱셈 연산자(*)가 적용되어 새로운 값을 생성합니다.
# 결과: [ 3  6 30]
print(arr * 3)

# numpy 배열을 바로 생성 가능합니다.
arr2 = np.array([5, 9, 10, 12])  

# 다른 numpy 배열의 모든 요소에 3을 곱한 새로운 배열을 생성합니다.
# 결과: [15 27 30 36]
print(arr2 * 3)

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

          # 리스트 - > [다차원] 넘파이 배열 생성 #

#= = = = = = = = = = = = = = = = = = = = = = = = = =
data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  # 2차원 리스트를 생성합니다.

print(data)  # 2차원 리스트를 출력합니다.
# 출력: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(len(data))  # 2차원 리스트의 길이를 출력합니다.
# 출력: 3

arr = np.array(data)  # 2차원 리스트를 NumPy 배열로 변환합니다.

print(arr)  # NumPy 배열을 출력합니다.
# 출력: 
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]

print(type(arr))  # NumPy 배열의 데이터 타입을 출력합니다.
#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 배열의 데이터타입 #

#= = = = = = = = = = = = = = = = = = = = = = = = = =
a = np.array([1, 2], dtype=np.float64)  # 정수로 이루어진 리스트를 부동 소수점 타입의 NumPy 배열로 생성합니다.
print(a.dtype)  # 배열의 데이터 타입을 출력합니다.
# 출력: float64 (부동 소수점 타입)

b = a.astype(np.int8)  # 배열의 데이터 타입을 int8로 변환하여 새로운 배열을 생성합니다.
print(b.dtype)  # 새로운 배열의 데이터 타입을 출력합니다.
# 출력: int8 (8비트 정수 타입)

arr * 2  # 배열의 모든 요소에 2를 곱한 값을 반환합니다.
# 예를 들어, [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 배열이 있다면 모든 요소에 2를 곱한 값을 반환합니다.

arr + 1000  # 배열의 모든 요소에 1000을 더한 값을 반환합니다.
# 예를 들어, [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 배열이 있다면 모든 요소에 1000을 더한 값을 반환합니다.

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 라이브러리 [정보] #

#= = = = = = = = = = = = = = = = = = = = = = = = = =

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # NumPy 배열을 생성합니다.

print(type(arr))  # arr의 데이터 타입을 출력합니다.
# 출력: <class 'numpy.ndarray'>

print(arr.size)  # arr의 총 요소 개수를 출력합니다.
# 출력: 9

print(arr.ndim)  # arr의 차원 수를 출력합니다.
# 출력: 2 (2차원 배열)

print(arr.shape)  # arr의 형태를 나타내는 튜플을 출력합니다.
# 출력: (3, 3) (3행 3열의 배열)

print(arr.dtype)  # arr의 데이터 타입을 출력합니다.
# 출력: int64 (64비트 정수 타입)

print(arr.flat)  # arr의 각 요소에 대한 이터레이터(사이즈)를 출력합니다.
# 출력: <numpy.flatiter object at 0x7fe460df5c10>

print(arr.nbytes)  # arr의 메모리 사용량을 출력합니다.
# 출력: 72 (바이트 단위)

print(arr.T)  # arr의 전치 행렬(Transpose)을 출력합니다.
# 출력: 
# [[1 4 7]
#  [2 5 8]
#  [3 6 9]]

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 라이브러리 [생성] #

#= = = = = = = = = = = = = = = = = = = = = = = = = =

# 배열의 디폴트는 float형 입니다.

np.zeros((2, 3))  # 2x3 크기의 영행렬을 생성합니다.
# 출력:
# array([[0., 0., 0.],
#        [0., 0., 0.]])
# 모든 요소가 0인 2x3 크기의 배열을 생성합니다.

np.ones((2, 3))  # 2x3 크기의 일행렬을 생성합니다.
# 출력:
# array([[1., 1., 1.],
#        [1., 1., 1.]])
# 모든 요소가 1인 2x3 크기의 배열을 생성합니다.

np.full((2, 3), 2)  # 2x3 크기이고 모든 요소가 2인 배열을 생성합니다.
# 출력:
# array([[2, 2, 2],
#        [2, 2, 2]])
# 모든 요소가 2인 2x3 크기의 배열을 생성합니다.

np.eye(3)  # 3x3 크기의 단위 행렬(대각 요소는 1이고 나머지는 0인 행렬)을 생성합니다.
# 출력:
# array([[1., 0., 0.],
#        [0., 1., 0.],
#        [0., 0., 1.]])
# 대각선 요소가 1이고 나머지 요소가 0인 3x3 크기의 단위 행렬을 생성합니다.

x = range(5)  # range 함수를 사용하여 0부터 4까지의 정수를 생성합니다.

print(type(x))  # x의 데이터 타입을 출력합니다.
# 출력: <class 'range'>
# range 함수를 사용하여 생성된 객체는 range 타입입니다.

print(x)  # x 변수를 출력합니다.
# 출력: range(0, 5)
# range 함수를 사용하여 생성된 객체의 내용을 출력합니다.

y = np.arange(6)  # NumPy의 arange 함수를 사용하여 0부터 5까지의 정수를 생성합니다.
print(type(y))  # y의 데이터 타입을 출력합니다.
# 출력: <class 'numpy.ndarray'>
# arange 함수를 사용하여 생성된 객체는 NumPy의 ndarray 타입입니다.

print(y)  # y 변수를 출력합니다.
# 출력: array([0, 1, 2, 3, 4, 5])
# arange 함수를 사용하여 생성된 배열의 내용을 출력합니다.

z = y.astype(np.float32)  # 배열 y의 데이터 타입을 float32로 변환하여 새로운 배열 z를 생성합니다.
print(z)  # 배열 z를 출력합니다.
# 출력: [0. 1. 2. 3. 4. 5.]
# 배열 y의 모든 요소를 부동 소수점 타입으로 변환한 배열을 출력합니다.

y.shape = (2, 3)  # 배열 y의 형태를 2x3으로 변경합니다.
print(y)  # 배열 y를 출력합니다.
# 출력:
# [[0 1 2]
#  [3 4 5]]
# 배열 y의 형태가 2x3으로 변경된 것을 출력합니다.

y = y.flatten()  # 다차원 배열 y를 1차원으로 평탄화합니다.
print(y)

y.resize(3, 2)  # 배열 y의 형태를 3x2로 변경합니다.
print(y)  # 배열 y를 출력합니다.
# 출력:
# [[0 1]
#  [2 3]
#  [4 5]]
# 다차원 배열을 1차원으로 평탄화한 후 다시 3x2 형태로 변경한 배열을 출력합니다.

data = np.arange(12).reshape(4, 3)  # 0부터 11까지의 정수로 이루어진 배열을 4x3 형태로 재구성합니다.
print(data)  # 배열 data를 출력합니다.
# 출력:
# [[ 0  1  2]
#  [ 3  4  5]
#  [ 6  7  8]
#  [ 9 10 11]]
# 4x3 형태로 재구성된 배열을 출력합니다.

data > 5  # 배열 data의 각 요소에 대해 5보다 큰지 여부를 확인하여 불리언 배열을 생성합니다.
# 출력:
# array([[False, False, False],
#        [False, False, False],
#        [ True,  True,  True],
#        [ True,  True,  True]])

data[data > 5]  # 배열 data에서 5보다 큰 요소들로 이루어진 배열을 추출합니다.
# 출력: array([ 6,  7,  8,  9, 10, 11])
# 배열 data에서 5보다 큰 요소들로 이루어진 배열을 출력합니다.

data[data > 5] = 5  # 배열 data에서 5보다 큰 요소들을 5로 대체합니다.
print(data)  # 대체된 배열 data를 출력합니다.
# 출력:
# [[0 1 2]
#  [3 4 5]
#  [5 5 5]
#  [5 5 5]]
# 배열 data에서 5보다 큰 요소들을 5로 대체한 후의 배열을 출력합니다.

data = np.arange(12).reshape(12, 1)  # 0부터 11까지의 정수로 이루어진 배열을 12x1 형태로 재구성합니다.
print(data)  # 배열 data를 출력합니다.
# 출력:
# [[ 0]
#  [ 1]
#  [ 2]
#  [ 3]
#  [ 4]
#  [ 5]
#  [ 6]
#  [ 7]
#  [ 8]
#  [ 9]
#  [10]
#  [11]]
# 12x1 형태로 재구성된 배열을 출력합니다.

data = np.arange(12).reshape(6, 2)  # 0부터 11까지의 정수로 이루어진 배열을 6x2 형태로 재구성합니다.
print(data)  # 배열 data를 출력합니다.
# 출력:
# [[ 0  1]
#  [ 2  3]
#  [ 4  5]
#  [ 6  7]
#  [ 8  9]
#  [10 11]]
# 6x2 형태로 재구성된 배열을 출력합니다.    

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 라이브러리 [계산] #

#= = = = = = = = = = = = = = = = = = = = = = = = = =
data.sum()  # 배열 data의 모든 요소의 합을 계산합니다.
# 출력: 66
# 배열의 모든 요소를 더한 값을 반환합니다.

data.sum(axis=0)  # 배열 data의 각 열의 합을 계산합니다.
# 출력: array([18, 22, 26])
# 각 열의 합을 반환합니다.

data.sum(axis=1)  # 배열 data의 각 행의 합을 계산합니다.
# 출력: array([ 3, 12, 21, 30])
# 각 행의 합을 반환합니다.

data.mean()  # 배열 data의 모든 요소의 평균을 계산합니다.
# 출력: 5.5
# 배열의 모든 요소의 평균 값을 반환합니다.


#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 넘파이 배열의 요소 #

#= = = = = = = = = = = = = = = = = = = = = = = = = =

arr[1, 2]  # arr 배열에서 인덱스가 (1, 2)인 요소를 가져옵니다.
# 출력: 6
# 이는 2차원 배열에서 두 번째 행(인덱스 1)의 세 번째 열(인덱스 2)의 요소를 의미합니다.

arr[1][2]  # arr 배열에서 인덱스가 1인 행의 인덱스가 2인 요소를 가져옵니다.
# 출력: 6
# 이는 두 번째 행(인덱스 1)의 세 번째 열(인덱스 2)의 요소를 의미합니다.

arr[:2, :]  # arr 배열에서 처음부터 2번째 행까지 모든 열을 가져옵니다.
# 출력: 
# array([[1, 2, 3],
#        [4, 5, 6]])
# 이는 2차원 배열에서 처음부터 두 번째 행까지의 모든 요소를 가져오는 슬라이싱 연산입니다.

arr[:, 1]  # arr 배열에서 모든 행의 두 번째 열을 가져옵니다.
# 출력: array([2, 5, 8])
# 이는 2차원 배열에서 각 행의 두 번째 열의 요소를 가져오는 슬라이싱 연산입니다.

arr[:, :3]  # arr 배열에서 모든 행의 처음부터 세 번째 열까지의 요소를 가져옵니다.
# 출력: 
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
# 이는 2차원 배열에서 각 행의 처음부터 세 번째 열까지의 요소를 가져오는 슬라이싱 연산입니다.

data[0]  # 배열 data의 첫 번째 행을 선택합니다.
# 출력: array([0, 1, 2])
# 첫 번째 행을 선택하여 출력합니다.

data[[0]]  # 배열 data의 첫 번째 행을 2차원 배열로 선택합니다.
# 출력: 
# array([[0, 1, 2]])
# 첫 번째 행을 2차원 배열로 선택하여 출력합니다.

data[[1, 0]]  # 배열 data에서 인덱스가 1과 0인 행을 순서대로 선택합니다.
# 출력: 
# array([[ 3,  4,  5],
#        [ 0,  1,  2]])
# 인덱스가 1과 0인 행을 순서대로 선택하여 출력합니다.