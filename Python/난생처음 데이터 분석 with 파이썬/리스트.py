#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                   # 연관 : 넘파이 #

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                   # 리스트의 생성 #

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

# 변수 a부터 h까지의 값을 포함하는 리스트 listA를 생성합니다.
# listA = [a, b, c, d, e, f, g, h]
# 윗 코드는 변수가 정의되면 사용이 가능하지만 일반적으로는 사용이 불가능
listA = [10, 20, 200, 40, 50, 60, 70, 80]


# 숫자 5, 9, 12, 8, 30을 포함하는 리스트 listB를 생성합니다.
listB = [5, 9, 12, 8, 30]


# 리스트 listA와 리스트 listB를 결합하여 리스트 listC를 생성합니다.
# listA의 모든 요소가 listB의 요소 뒤에 추가됩니다.
listC = listA + listB


# 아래의 두 줄은 잘못된 문법.
# listA * listB는 두 리스트를 곱하는 것이 아니라, 리스트 listA를 listB의 원소 수만큼 반복하여 새로운 리스트를 만드려고 시도하는 것입니다.
# listB * 3은 listB를 세 번 반복하여 새로운 리스트를 만드는 것으로, 결과를 할당하지 않았으므로 아무 효과도 없습니다.
# 따라서 이 두 줄의 코드는 주석 처리합니다.
# listC = listA * listB
# listB * 3


#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 리스트의 요소 수정 #

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

# 리스트 listC를 생성합니다.
listC = [5, 10, 15, 20, 25, 30, 35, 40]


# 리스트 listC의 마지막 요소와 첫 번째 요소를 각각 반환하여 출력합니다.
print(listC[-1], listC[0])


# 리스트 listC의 첫 번째 요소를 200으로 변경합니다.
listC[0] = 200


# 리스트 listC의 마지막 요소를 50으로 변경합니다.
listC[-1] = 50


# listC의 인덱스 0부터 2까지의 요소를 슬라이싱하여 반환
# 결과: [5, 10, 15]
print(listC[0:3])


# listC의 인덱스 1부터 3까지의 요소를 슬라이싱하여 반환
# 결과: [10, 15, 20]
print(listC[1:4])


# listC의 처음부터 인덱스 4까지의 요소를 슬라이싱하여 반환
# 결과: [5, 10, 15, 20, 25]
print(listC[:5])


# listC의 인덱스 3부터 마지막 요소까지 슬라이싱하여 반환
# 결과: [20, 25, 30, 35, 40, 50]
print(listC[3:])


# listC의 인덱스 3의 값을 9999로 변경합니다.
listC[3] = 9999


#= = = = = = = = = = = = = = = = = = = = = = = = = = 

                # 리스트의 라이브러리 함수 #

#= = = = = = = = = = = = = = = = = = = = = = = = = = 

# 리스트 listC의 끝에 100을 추가합니다.
listC.append(100)


# 만약 리스트 listC에 9999가 포함되어 있다면
if 9999 in listC:
    # 리스트에서 9999를 제거합니다.
    listC.remove(9999)
else:
    # 리스트에 9999가 없는 경우 메시지를 출력합니다.
    print("9999 없음")


# 리스트의 인덱스 0 위치에 777을 삽입합니다.
listC.insert(0, 777)


# 리스트의 인덱스 5 위치에 97을 삽입합니다.
listC.insert(5, 97)


# 리스트를 생성
list_1 = [897, 2, 1, 4, 99, 5.24, 17]


# 리스트를 정렬합니다 (오름차순).
list_1.sort()


# 오름차순으로 정렬된 리스트를 다시 역순으로 정렬합니다.
# reverse = True 옵션을 사용하여 역순으로 정렬합니다.
list_1.sort(reverse=True)


# 정렬된 리스트를 다시 역순으로 뒤집습니다.
list_1.reverse()


a = 3
b = [1, 3, 5, 7, 9]

# 변수 a가 리스트 b 안에 포함되어 있는지 확인하고 결과를 출력합니다.
# 결과: True (3은 리스트 b 안에 있음)
print(a in b)


# 변수 a가 리스트 b 안에 포함되어 있지 않은지 확인하고 결과를 출력합니다.
# 결과: False (3은 리스트 b 안에 있으므로 포함되어 있지 않음을 나타냄)
print(a not in b)


# 리스트 b의 합을 계산합니다.
sum(b)


# 리스트 b의 최댓값을 찾습니다.
max(b)


# 리스트 b의 최솟값을 찾습니다.
min(b)


# 리스트 b의 길이(요소의 개수)를 반환합니다.
len(b)


# 리스트 b의 합을 요소의 개수로 나누어 평균을 계산합니다.
# 평균을 구할 때는 sum(b) / len(b)와 같은 방법으로 계산합니다.
# 결과: 리스트 b의 요소들의 평균값
sum(b) / len(b) 